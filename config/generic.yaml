packages:
- name: rust
  install:
    cmd: bash
    systemCall: true
    args:
    - '-c'
    - "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"
- name: names
  install:
    cmd: bash
    args:
    - '-c'
    - 'curl -sSf https://fnichol.github.io/names/install.sh | sh'
- name: ngrok
  install:
    cmd: bash
    args:
    - '-c'
    - 'curl https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz | tar xzv ngrok'
- name: kustomize
  install:
    cmd: bash
    args:
    - '-c'
    - 'curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash'
- name: kcli
  install:
    cmd: bash
    args:
    - '-c'
    - 'curl -s https://raw.githubusercontent.com/karmab/kcli/master/install.sh | bash'
- name: nvm
  install:
    cmd: bash
    args:
    - '-c'
    - 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash'
- name: cert-manager
  install:
    cmd: kubectl
    args:
    - apply
    - '-f'
    - https://github.com/cert-manager/cert-manager/releases/download/v1.8.0/cert-manager.yaml
- name: openebs
  install:
    cmd: kubectl
    args:
    - apply 
    - '-f'
    - 'https://openebs.github.io/charts/openebs-operator.yaml'
- name: kubevirt
  preInstall:
  - cmd:
      cmd: kubectl
      args:
      - create
      - '-f'
      - 'https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRT_VERSION}/kubevirt-operator.yaml'
  install:
    cmd: kubectl
    args:
    - create
    - '-f'
    - https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRT_VERSION}/kubevirt-cr.yaml
- name: kubesphere
  preInstall:
  - cmd:
      cmd: kubectl
      args:
      - apply
      - '-f'
      - 'https://github.com/kubesphere/ks-installer/releases/download/v3.3.0-rc.1/kubesphere-installer.yaml'
  install:
    cmd: kubectl
    args:
    - apply
    - '-f'
    - https://github.com/kubesphere/ks-installer/releases/download/v3.3.0-rc.1/cluster-configuration.yaml
- name: gitpod
  preInstall:
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'curl https://kots.io/install | bash'
  install:
    cmd: kubectl
    systemCall: true
    args:
    - kots
    - install
    - gitpod
    - '-n'
    - gitpod
- name: qemu-kvm
  packageManager: apt-get
  preInstall:
  - cmd:
      cmd: apt-get
      args: 
      - install
      - libvirt-daemon-system
      - libvirt-clients
      - bridge-utils
      - qemu-system-x86
      - '-y'
- name: qemu-kvm
  packageManager: yum
  preInstall:
  - cmd:
      cmd: yum
      args: 
      - install
      - libvirt
      - libvirt-python
      - libguestfs-tools
      - virt-install
      - '-y'
- name: podman
  packageManager: apt-get
  preInstall:
  - issuePrefix: 'Ubuntu 18.04'
    cmd:
      cmd: apt-get
      args: 
      - install
      - software-properties-common
      - '-y'
  - issuePrefix: 'Ubuntu 18.04'
    cmd:
      cmd: add-apt-repository
      args: 
      - ppa:projectatomic/ppa
      - '-y'
  - issuePrefix: 'Ubuntu 20.04'
    cmd:
      cmd: bash
      args:
        - '-c'
        - 'echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list'
  - issuePrefix: 'Ubuntu 20.04'
    cmd:
      cmd: bash
      args:
        - '-c'
        - 'curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key | sudo apt-key add -'
- name: kubeadm
  packageManager: apt-get
  preInstall:
  - cmd:
      cmd: apt-get
      args: 
      - update
  - cmd:
      cmd: apt-get
      args: 
      - install
      - '-y'
      - apt-transport-https
      - ca-certificates
      - curl
  - cmd:
      cmd: bash
      args:
        - '-c'
        - 'curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg'
  - cmd:
      cmd: bash
      args:
        - '-c'
        - 'echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list'
  - cmd:
      cmd: apt-get
      args: 
      - update
  - cmd:
      cmd: apt-get
      args: 
      - install
      - '-y'
      - kubelet
      - kubectl
  - cmd:
      cmd: modprobe
      args: 
      - overlay
  - cmd:
      cmd: modprobe
      args: 
      - br_netfilter
  - cmd:
      cmd: ufw
      args: 
      - disable
  - cmd:
      cmd: swapoff
      args: 
      - '-a'
- cmd:
      cmd: bash
      args:
      - '-c'
      - echo "1" > /proc/sys/net/ipv4/ip_forward
- name: vim
  packageManager: brew
- name: vim
  packageManager: apk
- name: vim
  packageManager: apt-get
- name: vim
  packageManager: yum
- name: virt-manager
  packageManager: apt-get
- name: gcc
  packageManager: apt-get
- name: bash-completion
  packageManager: brew
- name: ffmpeg
  packageManager: brew
- name: asciinema
  packageManager: brew
- name: curl
  packageManager: apk
- name: wget
  packageManager: apk
- name: openvpn
  packageManager: apt-get
- name: npm
  packageManager: apt-get
- name: go
  packageManager: snap
  install:
    args:
    - '--classic'
- name: ngrok
  packageManager: snap
- name: http-server
  packageManager: npm
- name: snyk
  packageManager: npm
- name: yarn
  packageManager: npm
- name: make
  packageManager: apt-get
- name: socat
  packageManager: apt-get
- name: protobuf-compiler
  packageManager: apt-get
- name: ifconfig
  install:
    cmd: bash
    args:
    - '-c'
    - 'apt install -y net-tools'
- name: avahi-daemon
  packageManager: apt-get
- name: bazel
  packageManager: apt-get
  preInstall:
  - cmd:
      cmd: bash
      args:
        - '-c'
        - 'apt install apt-transport-https curl gnupg -y'
  - cmd:
      cmd: bash
      args:
        - '-c'
        - 'curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > /etc/apt/trusted.gpg.d/bazel.gpg'
  - cmd:
      cmd: bash
      args:
        - '-c'
        - 'echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list'
- name: nvidia-docker2
  packageManager: apt-get
  preInstall:
  - cmd:
      cmd: bash
      args:
        - '-c'
        - 'rm -rf /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg'
  - cmd:
      cmd: bash
      args:
        - '-c'
        - 'curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg'
  - cmd:
      cmd: bash
      args:
        - '-c'
        - |
          curl -s -L https://nvidia.github.io/libnvidia-container/{{.OS_ID}}{{.OS_VERSION_ID}}/libnvidia-container.list | sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
- name: nvidia-docker2
  packageManager: yum
  preInstall:
  - cmd:
      cmd: bash
      args:
        - '-c'
        - 'curl -s -L https://nvidia.github.io/libnvidia-container/{{.OS_ID}}{{.OS_VERSION_ID}}/libnvidia-container.repo | sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo'
  - cmd:
      cmd: yum
      args:
        - 'glibc'
        - '-y'
- name: screenfetch
  packageManager: brew
- name: freerdp
  packageManager: brew
- name: freerdp2-x11
  packageManager: apt-get
- name: rpi-imager
  packageManager: apt-get
- name: dnsmasq
  packageManager: apt-get
- name: dnsmasq
  packageManager: yum
- name: k8s
  preInstall:
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'echo 1 > /proc/sys/net/ipv4/ip_forward'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'hd i conntrack'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'hd i socat'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'hd get https://dl.k8s.io/release/v1.23.0/bin/linux/amd64/kubeadm -o /usr/local/bin/kubeadm'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'chmod u+x /usr/local/bin/kubeadm'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'hd get https://dl.k8s.io/release/v1.23.0/bin/linux/amd64/kubelet -o /usr/local/bin/kubelet'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'chmod u+x /usr/local/bin/kubelet'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'curl -sSL "https://raw.githubusercontent.com/kubernetes/release/v0.4.0/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service" | sed "s:/usr/bin:/usr/local/bin:g" | sudo tee /etc/systemd/system/kubelet.service'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'mkdir -p /etc/systemd/system/kubelet.service.d'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'curl -sSL "https://raw.githubusercontent.com/kubernetes/release/v0.4.0/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf" | sed "s:/usr/bin:/usr/local/bin:g" | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'hd i containernetworking/plugins'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'hd i opencontainers/runc'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'hd i containerd'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'hd i crictl'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'modprobe br_netfilter'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'swapoff -a'
  - cmd:
      cmd: bash
      args: 
      - '-c'
      - 'systemctl stop firewalld'
install:
    cmd: bash
    args: 
    - '-c'
    - 'systemctl enable --now kubelet'
